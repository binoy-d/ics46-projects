#include "gtest/gtest.h"
#include "proj1.hpp"
#include "ver.hpp" 
#include <map>
#include <string>


/*
 
Note that this IS NOT a comprehensive set of test cases.
You should still write additional test cases.

This is to get you started and serve as a sanity check.

 */


namespace{

TEST(SimpleCases, EmptyStrings){

    std::map<char, unsigned> puzzle;

    bool p1 = puzzleSolver("", "", "", puzzle);
    EXPECT_TRUE( p1 &&  gradeYesAnswer("", "", "", puzzle) ) ;
}
TEST(SimpleCases, PotPanBib){

    std::map<char, unsigned> puzzle;

    bool p1 = puzzleSolver("POT", "PAN", "BIB", puzzle);
    EXPECT_TRUE( p1 &&  gradeYesAnswer("POT", "PAN", "BIB", puzzle) ) ;
}

TEST(SimpleCases, NeatFind){

    std::map<char, unsigned> puzzle;

    bool p1 = puzzleSolver("UCI", "ALEX", "MIKE", puzzle);
    EXPECT_TRUE( p1 &&  gradeYesAnswer("UCI", "ALEX", "MIKE", puzzle) );
} // end test two, "NeatFind"


TEST(SimpleCases, FirstNo){

    std::map<char, unsigned> puzzle;

    bool p1 = puzzleSolver("LARRY", "CAREER", "LEGEND", puzzle);
    EXPECT_FALSE( p1 );
}



TEST(SimpleCases, StressTestNo){

    std::map<char, unsigned> puzzle;

    EXPECT_FALSE(puzzleSolver("LARLRLRRRY", "CAREUWDBIDBUWER", "LEGDWUINDWEND", puzzle));
    EXPECT_FALSE(puzzleSolver("QWERTYUIOOPASDDWILAUBDWILAUB", "IDBFWILUBWDFAILYUFVBWAYILFVBWAYILV", "IDBFWDWUBDDFAILYUFVBWAYILFVBWAYILV", puzzle));
}



TEST(SimpleCases, BiggerStressTestNo){

    std::map<char, unsigned> puzzle;
    EXPECT_FALSE(puzzleSolver("QWERTYUIOOPASDDWILAUBDWILAUB", "IDBFWILUBWDFAILYUFVBWAYILFVBWAYILV", "IDBFWDWUBDDFAILYUFVBWAYILFVBWAYILV", puzzle));
}



TEST(SimpleCases, UltraStressTestNo){

    std::map<char, unsigned> puzzle;
    EXPECT_FALSE(puzzleSolver("ASFUBSUBQWQWERTYUIOOPASDDWILAUBDWILAUB", "DWUINWDUBNIDBFWILUBWDFAILYUFVBWAYILFVBWAYILV", "DWIUNWDBUIIDBFWDWUBDDFAILYUFVBWAYILFVBWAYILV", puzzle));
}

TEST(SimpleCases, StressTestYes){
    std::map<char, unsigned> puzzle;
    bool p1 = puzzleSolver("DONALD", "GERALD", "ROBERT", puzzle);
    EXPECT_TRUE( p1 &&  gradeYesAnswer("DONALD", "GERALD", "ROBERT", puzzle) );
}




TEST(SimpleCases, FiveYes){
    std::map<char, unsigned> puzzle;
    bool p1 = puzzleSolver("KUPA", "FHUXU", "FNFAU", puzzle);
    EXPECT_TRUE( p1 &&  gradeYesAnswer("KUPA", "FHUXU", "FNFAU", puzzle) );
}
TEST(SimpleCases, TenYes){
    std::map<char, unsigned> puzzle;
    bool p1 = puzzleSolver("BKWOWILAVI", "PLCLWCWOPA", "OBWIOIICLL", puzzle);
    EXPECT_TRUE( p1 &&  gradeYesAnswer("BKWOWILAVI", "PLCLWCWOPA", "OBWIOIICLL", puzzle) );
}
TEST(SimpleCases, FifteenYes){
    std::map<char, unsigned> puzzle;
    bool p1 = puzzleSolver("SKWAWGWLHANHWS", "SSWGLTHWQWGLTKL", "SLTSNKTQLAKQAWA", puzzle);
    EXPECT_TRUE( p1 &&  gradeYesAnswer("SKWAWGWLHANHWS", "SSWGLTHWQWGLTKL", "SLTSNKTQLAKQAWA", puzzle) );
}
TEST(SimpleCases, TwentyYes){
    std::map<char, unsigned> puzzle;
    bool p1 = puzzleSolver("QGRBBGQTCJPBJPPJBJM", "TMPCTQGPJRRPJJBQTQRQ", "GGTBPCBGPBQMQPBQAAQT", puzzle);
    EXPECT_TRUE( p1 &&  gradeYesAnswer("QGRBBGQTCJPBJPPJBJM", "TMPCTQGPJRRPJJBQTQRQ", "GGTBPCBGPBQMQPBQAAQT", puzzle) );
}

TEST(SimpleCases, ThirtyYes){
    std::map<char, unsigned> puzzle;
    bool p1 = puzzleSolver("IGWJIGDWRMZDRRGRCWRWCWCGSWMRRS", "SWDSIRZWGCSGGICWJWIDSWGGWGSDJR", "WMSMJISJICGMGIJWDJCSMJJCIMJDJS", puzzle);
    EXPECT_TRUE( p1 &&  gradeYesAnswer("IGWJIGDWRMZDRRGRCWRWCWCGSWMRRS", "SWDSIRZWGCSGGICWJWIDSWGGWGSDJR", "WMSMJISJICGMGIJWDJCSMJJCIMJDJS", puzzle) );
}

TEST(GeneratedCasesYes, YesTest_1_Size40){
        std::map<char, unsigned> puzzle;
        bool p1 = puzzleSolver("FLWJZFYALZRWLAAWRZRHHWWAFAZRLWZLWHFYHAEW", "RWFYWHZZWRWAJEWYAHAZHRALLRFHZLFAFAAFAYFW", "ALFAZJYEZFRLRFAFYHYWYRLEYYYEAZFJFZWJLZZW", puzzle);
        EXPECT_TRUE( p1 &&  gradeYesAnswer("FLWJZFYALZRWLAAWRZRHHWWAFAZRLWZLWHFYHAEW", "RWFYWHZZWRWAJEWYAHAZHRALLRFHZLFAFAAFAYFW", "ALFAZJYEZFRLRFAFYHYWYRLEYYYEAZFJFZWJLZZW", puzzle) );


}
TEST(GeneratedCasesYes, YesTest_2_Size50){
        std::map<char, unsigned> puzzle;
        bool p1 = puzzleSolver("WWQPUJBUQUCCAJQHAJQBHDBUCWPUWPCPQWQAWHPCUWWHJPBPBJ", "AJAQCWHWJUPWPCWWDWPCDBCBDJPPCCUPPCCPQJQUADUWCDJHJH", "QPPUDPHCDQWBHBBJHDUPPDCJWDQBAJHQJAAHBJUDWUPWBQWCWU", puzzle);
        EXPECT_TRUE( p1 &&  gradeYesAnswer("WWQPUJBUQUCCAJQHAJQBHDBUCWPUWPCPQWQAWHPCUWWHJPBPBJ", "AJAQCWHWJUPWPCWWDWPCDBCBDJPPCCUPPCCPQJQUADUWCDJHJH", "QPPUDPHCDQWBHBBJHDUPPDCJWDQBAJHQJAAHBJUDWUPWBQWCWU", puzzle) );


}

TEST(GeneratedCasesYes, YesTest_3_Size100){
        std::map<char, unsigned> puzzle;
        bool p1 = puzzleSolver("CCGJFPCFJEHHVPKJKJEFKFEJKCECVFVGCJEHQPFFPGHHVPGHGQQQHHPGGVVPJCGHQVVKCEFGEFCFFFVKCJVKHJJPKEJVJVKPVKV", "KEEGEVJEHKVJKQVVHJCFGFEHCCJJGQKQEKHPQEKCJVCQPCHQQHCFVKPHGPVHJFJFKCJQKGVQEHHEHPPGKCVPPQCVKHFPEGEKFEGP", "VEQQFQVQFEHJKCQGJEJVQJVCJKJPVCJHVHQGEPQFHEVQJKJHQFQKCKPPJEFGVKPQVJECGGKVKEPQFCCPGEEQJEPEJVGVKHHGHHFQ", puzzle); 
        EXPECT_TRUE( p1 &&  gradeYesAnswer("CCGJFPCFJEHHVPKJKJEFKFEJKCECVFVGCJEHQPFFPGHHVPGHGQQQHHPGGVVPJCGHQVVKCEFGEFCFFFVKCJVKHJJPKEJVJVKPVKV", "KEEGEVJEHKVJKQVVHJCFGFEHCCJJGQKQEKHPQEKCJVCQPCHQQHCFVKPHGPVHJFJFKCJQKGVQEHHEHPPGKCVPPQCVKHFPEGEKFEGP", "VEQQFQVQFEHJKCQGJEJVQJVCJKJPVCJHVHQGEPQFHEVQJKJHQFQKCKPPJEFGVKPQVJECGGKVKEPQFCCPGEEQJEPEJVGVKHHGHHFQ", puzzle) );


}

TEST(GeneratedCasesYes, YesTest_4_Size200){
        std::map<char, unsigned> puzzle;
        bool p1 = puzzleSolver("SHSEFBSCYGEYGHSGDBGGRYSSHBSYSDDSSDCFBCGHGRBHBYBSYDDBCHRCFCBDHGRFFRDSDSBYECHBHYBCFFHDFRGHDRFEYGCDFYFSSFYEHEFSDHSHHRCEFRFEFFHDFRBEECBSHDEBDRYESSCGBDHDBRRGHDHGSFSRFEEDGFSFCYRCGRFGCYBFFRDSSSCHHBGEBERSRBF", 
"CBYFFDBBSBFBGBEHEFFCDYFEDCSRGEFGCSGREEHFDYHEFSDYFGDHEDHBEBSFCDEFGRHCSSEEDBEEDDFCDDRFSEHCEHBBCHHGERCHRDSCCSYFFHHRDGFHBDYEHDBDRRSCDHDGEYDREESYSBCCYFGBHHGSEYGCGFEGFRRBCEBFDRFGRYYDHGDDECGDBECSEHFDEESGESGS", "HFFHSRSBYDCYRCSHFRGSHRBEBBBGRDSFCSFYYYBYGRCYEFDDHRYRYEDHGRYGERBHCHYGSDEYEYGRSGFDESCEDYYRRRHGGHSSHCCERDHCRCEGHGDGRYCBYRRSRRGRBHGECRGHDFCDCHGCEBYHGRHEGGERFFHBDFYGHHDYGFRHRSBDSGRRSRDSSDECBECYRBRFFCEEERHH", puzzle);
        EXPECT_TRUE( p1 &&  gradeYesAnswer("SHSEFBSCYGEYGHSGDBGGRYSSHBSYSDDSSDCFBCGHGRBHBYBSYDDBCHRCFCBDHGRFFRDSDSBYECHBHYBCFFHDFRGHDRFEYGCDFYFSSFYEHEFSDHSHHRCEFRFEFFHDFRBEECBSHDEBDRYESSCGBDHDBRRGHDHGSFSRFEEDGFSFCYRCGRFGCYBFFRDSSSCHHBGEBERSRBF", "CBYFFDBBSBFBGBEHEFFCDYFEDCSRGEFGCSGREEHFDYHEFSDYFGDHEDHBEBSFCDEFGRHCSSEEDBEEDDFCDDRFSEHCEHBBCHHGERCHRDSCCSYFFHHRDGFHBDYEHDBDRRSCDHDGEYDREESYSBCCYFGBHHGSEYGCGFEGFRRBCEBFDRFGRYYDHGDDECGDBECSEHFDEESGESGS", "HFFHSRSBYDCYRCSHFRGSHRBEBBBGRDSFCSFYYYBYGRCYEFDDHRYRYEDHGRYGERBHCHYGSDEYEYGRSGFDESCEDYYRRRHGGHSSHCCERDHCRCEGHGDGRYCBYRRSRRGRBHGECRGHDFCDCHGCEBYHGRHEGGERFFHBDFYGHHDYGFRHRSBDSGRRSRDSSDECBECYRBRFFCEEERHH", puzzle) );


}

TEST(GeneratedCasesYes, YesTest_5_Size500){
        std::map<char, unsigned> puzzle;
        bool p1 = puzzleSolver("VTPXHIVWWIHBYYIPXXVYVETXPYPIXPVHBIVEEBXVWPBYYTTHVHTHWTYWXHVPEYEBBIIWIBTYPYYTTVBWYBYXBYETVXHEVHXIYEVIIBYYTIEBWVXYPPHWYWXEBBIVPPTTBBIIYEIBYTXBVBIPEWEHYIHVVYTEXBBTIEYEPTHYBPBBHXPTHYYPTBTPXVWTPWHIBTBBPWXHWIHIXYXVIHTWTVHPXTBIETVTPHVTVTBEBPIHWEIPWVTYXYYBEHYBIXXHIVEXHVIWXVHEYXPWXVBEYEXEEWHHTXTYPPTPVYVVVXIVBBWHPBWEXITWYXYTVBPPIIWBPHIIHTITYTTWTYTTVVYEYXVVIIHYHHVIXIBTIPIHWXTVBWWHTIPPBVPYVYIBEWYVHXPWXTHXPXVBEWTIVVXIWVHPEVEXTHETYIPXTBHYWWBIBHHVVEYWEYPTIXXPTEEVYHWEIYWPHXTEWPVPEEWBEXWXHTBYXXPEHXBYXTIWXBPTIWI", "TXYBXWHTTYYPYWTBWIYVVTPTVTTEYIBBHVXVWTHEBYEWBHPHHIEEVPIVIHXEBWYYXXEXPIXYHBTHEXIIIPVVYYVBTWEIYITBTYYIYHWVTXTHBVYBYYHHTPIPPTIXTTPTWHIXEIIHTPXIWBXPBBYHIITPHYHTEXEYPHHEVPVPTVXWBHPHHBEEXITBWWEITVEEWXTTWHXVPYEIBPTHYPIPTIYIITXYVWPHEYXYEPIWHVHVVPXPWIXXPIEXTPBIWBBHEIHWTXEPVBBIWWYPWHHEEXBVPWXVIBVWBPWHVHYIVPTYXVTTWBVEYVWBWYBIHWTPPWWTHYPHIWIVWWYIVIXVHHHIIBBWTEYHBIPHWXTTETIWVWXXHTWPPXIPEBWHIWWPPEXYWYVEHVVBVTYWEPPVTBHXIXHVYPIPYVPWPHWTBIEPVTXEIEVIHTTTBHHBXBPVXYTPXHWXVPEVPVWBVIBTVBEXWXWXIXXHWITIVWWBEVXIHYXHVPYV", "TPXYTIVPVWITBWTXPYWITHVBBETBHEYETIEHYXWYEWVPBPIYVXPWYHWTIIEXYYYIPHPEHBHTHWTHWBXXEBEVXBVTBBWBEWEHWYEXIVPVXBWBEBTHYPTTVBIIVIXEPEWBVXXYHIHVIBVEBIHVWVWPBIWTWVPPHVVVEBPETWHTXIHBYTIXYXEIHYHHPTXIBEYBIPBHPXXPTWHBXIXEVVVIVWVBTVBBWEEWXBEVWEYPBETWYHWTPIBBBYEWIBXHPXPEPBYEVETTVPEVYWXWWEWVIXTPVETWVHBVBWPEYWYWHEBHBIHTHYIYIBIHXEHHEVIXWIIVXPTBBIWWVWXYBWWPYWWIHVPVHHIVBBXYITYIXWTIYWTVYHWHXBPXVEBTHBWVWHTEBPPVHBHWBEWBVVPPYIYVBTWWPBXBWHXEEPIIHWVTTTTVPVWVYHXXPPPYBXHBITXVPPHTTVIBWYXIXIYPYVHXBYXXEIBWYEBVXHXYIBBBIWHXHVWW", puzzle);
        EXPECT_TRUE( p1 &&  gradeYesAnswer("VTPXHIVWWIHBYYIPXXVYVETXPYPIXPVHBIVEEBXVWPBYYTTHVHTHWTYWXHVPEYEBBIIWIBTYPYYTTVBWYBYXBYETVXHEVHXIYEVIIBYYTIEBWVXYPPHWYWXEBBIVPPTTBBIIYEIBYTXBVBIPEWEHYIHVVYTEXBBTIEYEPTHYBPBBHXPTHYYPTBTPXVWTPWHIBTBBPWXHWIHIXYXVIHTWTVHPXTBIETVTPHVTVTBEBPIHWEIPWVTYXYYBEHYBIXXHIVEXHVIWXVHEYXPWXVBEYEXEEWHHTXTYPPTPVYVVVXIVBBWHPBWEXITWYXYTVBPPIIWBPHIIHTITYTTWTYTTVVYEYXVVIIHYHHVIXIBTIPIHWXTVBWWHTIPPBVPYVYIBEWYVHXPWXTHXPXVBEWTIVVXIWVHPEVEXTHETYIPXTBHYWWBIBHHVVEYWEYPTIXXPTEEVYHWEIYWPHXTEWPVPEEWBEXWXHTBYXXPEHXBYXTIWXBPTIWI", "TXYBXWHTTYYPYWTBWIYVVTPTVTTEYIBBHVXVWTHEBYEWBHPHHIEEVPIVIHXEBWYYXXEXPIXYHBTHEXIIIPVVYYVBTWEIYITBTYYIYHWVTXTHBVYBYYHHTPIPPTIXTTPTWHIXEIIHTPXIWBXPBBYHIITPHYHTEXEYPHHEVPVPTVXWBHPHHBEEXITBWWEITVEEWXTTWHXVPYEIBPTHYPIPTIYIITXYVWPHEYXYEPIWHVHVVPXPWIXXPIEXTPBIWBBHEIHWTXEPVBBIWWYPWHHEEXBVPWXVIBVWBPWHVHYIVPTYXVTTWBVEYVWBWYBIHWTPPWWTHYPHIWIVWWYIVIXVHHHIIBBWTEYHBIPHWXTTETIWVWXXHTWPPXIPEBWHIWWPPEXYWYVEHVVBVTYWEPPVTBHXIXHVYPIPYVPWPHWTBIEPVTXEIEVIHTTTBHHBXBPVXYTPXHWXVPEVPVWBVIBTVBEXWXWXIXXHWITIVWWBEVXIHYXHVPYV", "TPXYTIVPVWITBWTXPYWITHVBBETBHEYETIEHYXWYEWVPBPIYVXPWYHWTIIEXYYYIPHPEHBHTHWTHWBXXEBEVXBVTBBWBEWEHWYEXIVPVXBWBEBTHYPTTVBIIVIXEPEWBVXXYHIHVIBVEBIHVWVWPBIWTWVPPHVVVEBPETWHTXIHBYTIXYXEIHYHHPTXIBEYBIPBHPXXPTWHBXIXEVVVIVWVBTVBBWEEWXBEVWEYPBETWYHWTPIBBBYEWIBXHPXPEPBYEVETTVPEVYWXWWEWVIXTPVETWVHBVBWPEYWYWHEBHBIHTHYIYIBIHXEHHEVIXWIIVXPTBBIWWVWXYBWWPYWWIHVPVHHIVBBXYITYIXWTIYWTVYHWHXBPXVEBTHBWVWHTEBPPVHBHWBEWBVVPPYIYVBTWWPBXBWHXEEPIIHWVTTTTVPVWVYHXXPPPYBXHBITXVPPHTTVIBWYXIXIYPYVHXBYXXEIBWYEBVXHXYIBBBIWHXHVWW", puzzle) );


}


TEST(WorstCases, WorstCaseSize5){
    std::string s1 = "ABCD"; // 9876
    std::string s2 = "EFGH"; // 5432
    std::string s3 = "IEGJB";//15308
    std::map<char, unsigned> puzzle;
    bool p1 = puzzleSolver(s1, s2, s3, puzzle);
    EXPECT_TRUE( p1 &&  gradeYesAnswer(s1, s2, s3, puzzle) );
}


TEST(GWorstCases, WorstCaseSize9){
    std::string s1 = "CWGTSEION";
    std::string s2 = "CWGTSEION";
    std::string s3 = "NCGSIJWTEO";
    std::map<char, unsigned> puzzle;
    bool p1 = puzzleSolver(s1, s2, s3, puzzle);
    EXPECT_TRUE( p1 &&  gradeYesAnswer(s1, s2, s3, puzzle) );
}

TEST(WorstCases, ShortcutCase1){
    std::string s1 = "HGWRQK";
    std::string s2 = "GHSFPS";
    std::string s3 = "FGWWWGK";
    std::map<char, unsigned> puzzle;
    bool p1 = puzzleSolver(s1, s2, s3, puzzle);
    EXPECT_TRUE( p1 &&  gradeYesAnswer(s1, s2, s3, puzzle) );
}

TEST(GWorstCases, WorstCaseNoSize9){
    std::string s1 = "CWGTSEION";
    std::string s2 = "CWGTSEION";
    std::string s3 = "NCGSIJWTEN";
    std::map<char, unsigned> puzzle;
    bool p1 = puzzleSolver(s1, s2, s3, puzzle);
    EXPECT_FALSE( p1 );
}

TEST(TestSizeMismatch, SizeMismatchyes){
    std::string s1 = "00123456789";
    std::string s2 = "0";
    std::string s3 = "00123456789";
    std::map<char, unsigned> puzzle;
    bool p1 = puzzleSolver(s1, s2, s3, puzzle);
    EXPECT_TRUE( p1 &&  gradeYesAnswer(s1, s2, s3, puzzle) );
}

} // end namespace
